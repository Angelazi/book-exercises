install.packages("devtools")
# Install "fueleconomy" dataset from GitHub
devtools::install_github("hadley/fueleconomy")
# Use the `libary()` function to load the "fueleconomy" package
library(fueleconomy)
library(fueleconomy)
devtools::install_github("hadley/fueleconomy")
colnames(vehicles)
View(vehicles)
makes <- vehicles$make
# Use the `unique()` function to determine how many different car manufacturers
# are represented by the data set
length(unique(makes))
# Filter the data set for vehicles manufactured in 1997
vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles[vehicles$year == 1997, ])
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty)/2
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty)/2
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
# Arrange the 1997 cars by highway (`hwy`) gas milage
# Hint: use the `order()` function to get a vector of indices in order by value
# See also:
# https://www.r-bloggers.com/r-sorting-a-data-frame-by-the-contents-of-a-column/
order(vehicles_1997)
# Mutate the 1997 cars data frame to add a column `average` that has the average
# gas milage (between city and highway mpg) for each car
vehicles_1997$average <- (vehicles_1997$hwy + vehicles_1997$cty)/2
vehicles[vehicles$drive == "2-Wheel Drive", ]
efficiency_2wd <- vehicles_2wd[vehicles_2wd$cty > 20, ]
print(efficiency_2wd)
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
length(unique(makes))
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
colnames(vehicles)
View(vehicles)
colnames(vehicles)
library(fueleconomy)
colnames(vehicles)
View(vehicles)
colnames(vehicles)
makes <- vehicles$make
length(unique(makes))
vehicles_1997 <- vehicles[vehicles$year == 1997, ]
library("dplyr")
library("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library("dplyr")
library("dplyr")
library("nycflights13")
install.packages("nycflights13")
View(flights)
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
View(flights)
flights %>%
filter(dest == "SEA") %>%
#select(to_sea, origin, dest, delayed_in_air) %>%
summarize(to_sea, ave_delayed = mean(delayed_in_air, na.rm = TRUE))
# Exercise 4: practicing with dplyr
# Install the `"nycflights13"` package. Load (`library()`) the package.
# You'll also need to load `dplyr`
library("dplyr")
library("nycflights13")
# The data frame `flights` should now be accessible to you.
# Use functions to inspect it: how many rows and columns does it have?
# What are the names of the columns?
# Use `??flights` to search for documentation on the data set (for what the
# columns represent)
??Flights
View(flights)
# Use `dplyr` to give the data frame a new column that is the amount of time
# gained or lost while flying (that is: how much of the delay arriving occured
# during flight, as opposed to before departing).
flights <- mutate(flights, delayed_in_air = arr_delay - dep_delay)
View(flights)
# Use `dplyr` to sort your data frame in descending order by the column you just
# created. Remember to save this as a variable (or in the same one!)
flights <- arrange(flights, -delayed_in_air) # sort in descending order (add minus sign)
# For practice, repeat the last 2 steps in a single statement using the pipe
# operator. You can clear your environmental variables to "reset" the data frame
# Make a histogram of the amount of time gained using the `hist()` function
# On average, did flights gain or lose time?
# Note: use the `na.rm = TRUE` argument to remove NA values from your aggregation
summarize(flights, avg = mean(delayed_in_air, na.rm = TRUE))
# Create a data.frame of flights headed to SeaTac ('SEA'), only including the
# origin, destination, and the "gain_in_air" column you just created
to_sea <- filter(flights, dest == "SEA")
View(to_sea)
to_sea <- select(to_sea, origin, dest, delayed_in_air)
flights %>%
filter(dest == "SEA") %>%
#select(to_sea, origin, dest, delayed_in_air) %>%
summarize(to_sea, ave_delayed = mean(delayed_in_air, na.rm = TRUE))
# On average, did flights to SeaTac gain or loose time?
summarize(to_sea, ave_delayed = mean(delayed_in_air, na.rm = TRUE))
# Consider flights from JFK to SEA. What was the average, min, and max air time
# of those flights? Bonus: use pipes to answer this question in one statement
# (without showing any other data)!
